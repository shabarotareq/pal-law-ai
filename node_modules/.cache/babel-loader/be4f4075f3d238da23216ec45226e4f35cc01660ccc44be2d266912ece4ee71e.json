{"ast":null,"code":"const VignetteShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    offset: {\n      value: 1\n    },\n    darkness: {\n      value: 1\n    }\n  },\n  vertexShader: (/* glsl */\n  `\n    varying vec2 vUv;\n\n    void main() {\n\n    \tvUv = uv;\n    \tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n    }\n  `),\n  fragmentShader: (/* glsl */\n  `\n    uniform float offset;\n    uniform float darkness;\n\n    uniform sampler2D tDiffuse;\n\n    varying vec2 vUv;\n\n    void main() {\n\n    // Eskils vignette\n\n    \tvec4 texel = texture2D( tDiffuse, vUv );\n    \tvec2 uv = ( vUv - vec2( 0.5 ) ) * vec2( offset );\n    \tgl_FragColor = vec4( mix( texel.rgb, vec3( 1.0 - darkness ), dot( uv, uv ) ), texel.a );\n\n    /*\n\t\t// alternative version from glfx.js\n\t\t// this one makes more \"dusty\" look (as opposed to \"burned\")\n\n\t\tvec4 color = texture2D( tDiffuse, vUv );\n\t\tfloat dist = distance( vUv, vec2( 0.5 ) );\n\t\tcolor.rgb *= smoothstep( 0.8, offset * 0.799, dist *( darkness + offset ) );\n\t\tgl_FragColor = color;\n\t\t*/\n\n    }\n  `)\n};\nexport { VignetteShader };\n//# sourceMappingURL=VignetteShader.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}