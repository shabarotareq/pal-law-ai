{"ast":null,"code":"import { Vector3 } from \"three\";\nconst ColorCorrectionShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    powRGB: {\n      value: /* @__PURE__ */new Vector3(2, 2, 2)\n    },\n    mulRGB: {\n      value: /* @__PURE__ */new Vector3(1, 1, 1)\n    },\n    addRGB: {\n      value: /* @__PURE__ */new Vector3(0, 0, 0)\n    }\n  },\n  vertexShader: (/* glsl */\n  `\n    varying vec2 vUv;\n\n    void main() {\n\n    \tvUv = uv;\n\n    \tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n    }\n  `),\n  fragmentShader: (/* glsl */\n  `\n    uniform sampler2D tDiffuse;\n    uniform vec3 powRGB;\n    uniform vec3 mulRGB;\n    uniform vec3 addRGB;\n\n    varying vec2 vUv;\n\n    void main() {\n\n    \tgl_FragColor = texture2D( tDiffuse, vUv );\n    \tgl_FragColor.rgb = mulRGB * pow( ( gl_FragColor.rgb + addRGB ), powRGB );\n\n    }\n  `)\n};\nexport { ColorCorrectionShader };\n//# sourceMappingURL=ColorCorrectionShader.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}