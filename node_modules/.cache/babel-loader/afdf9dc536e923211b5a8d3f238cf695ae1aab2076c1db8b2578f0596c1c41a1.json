{"ast":null,"code":"import { Vector2 } from \"three\";\nconst TriangleBlurShader = {\n  uniforms: {\n    texture: {\n      value: null\n    },\n    delta: {\n      value: /* @__PURE__ */new Vector2(1, 1)\n    }\n  },\n  vertexShader: (/* glsl */\n  `\n    varying vec2 vUv;\n\n    void main() {\n\n    \tvUv = uv;\n    \tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n    }\n  `),\n  fragmentShader: (/* glsl */\n  `\n    #include <common>\n\n    #define ITERATIONS 10.0\n\n    uniform sampler2D texture;\n    uniform vec2 delta;\n\n    varying vec2 vUv;\n\n    void main() {\n\n    \tvec4 color = vec4( 0.0 );\n\n    \tfloat total = 0.0;\n\n    // randomize the lookup values to hide the fixed number of samples\n\n    \tfloat offset = rand( vUv );\n\n    \tfor ( float t = -ITERATIONS; t <= ITERATIONS; t ++ ) {\n\n    \t\tfloat percent = ( t + offset - 0.5 ) / ITERATIONS;\n    \t\tfloat weight = 1.0 - abs( percent );\n\n    \t\tcolor += texture2D( texture, vUv + delta * percent ) * weight;\n    \t\ttotal += weight;\n\n    \t}\n\n    \tgl_FragColor = color / total;\n\n    }\n  `)\n};\nexport { TriangleBlurShader };\n//# sourceMappingURL=TriangleBlurShader.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}